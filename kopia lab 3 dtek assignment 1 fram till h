/* main.c

   This file written 2024 by Artur Podobas and Pedro Antunes

   For copyright and licensing, see file COPYING */


/* Below functions are external and found in other files. */
extern void print(const char*);
extern void print_dec(unsigned int);
extern void display_string(char*);
extern void time2string(char*,int);
extern void tick(int*);
extern void delay(int);
extern int nextprime( int );

int mytime = 0x5957;
char textstring[] = "text, more text, and even more text!";

/* Below is the function that will be called when an interrupt is triggered. */
void handle_interrupt(unsigned cause) 
{}

/* Add your code here for initializing interrupts. */
void labinit(void)
{}

void set_leds (int led_mask){
  volatile int * p = (volatile int *) 0x04000000;
  led_mask &= 0x3FF;
  *p = led_mask;
}

void set_display( int display_number, int value){
  volatile int * p = (volatile int *) 0x04000050;
  p += (display_number * 0x10);
  switch (value)
  {
  case 0:
    *p = 0b11000000;
    break;
  case 1:
    *p = 0b11111001;
    break;
  case 2:
    *p = 0b10100100;
    break;
  case 3:
    *p = 0b10110000;
    break;
  case 4:
    *p = 0b10011001;
    break;
  case 5:
    *p = 0b10010010;
    break;
  case 6:
    *p = 0b10000010;
    break;
  case 7:
    *p = 0b11111000;
    break;
  case 8:
    *p = 0b10000000;
    break;
  case 9:
    *p = 0b10010000;
    break;
  
  default:
    *p = 0b11111111;
    break;
  }

}

int get_sw(void){
  volatile int* p = (volatile int*) 0x04000010;
  int a = *p;
  a &= 0x3FF;
  return a;
}

int get_btn(void){
  volatile int* p = (volatile int*) 0x040000d0;
  int a = *p;
  a &= 0x1;
  return a;

}

/* Your code goes into main as well as any needed functions. */
int main() {
  // Call labinit()
  labinit();

  int led_mask = 0;
  // Enter a forever loop
  while (1) {
    time2string( textstring, mytime ); // Converts mytime to string
    display_string( textstring ); //Print out the string 'textstring'
    delay( 1000 );          // Delays 1 sec (adjust this value)
    tick( &mytime );     // Ticks the clock once
    set_leds(led_mask);
    if (led_mask == 0xF){
      return 0;
    }
    led_mask++;
  }

}
